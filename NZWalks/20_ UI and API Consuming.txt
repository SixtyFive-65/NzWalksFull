--Create new Web Application on the same solution..

1.UI Program.cs
 -Before builder.Build()

-Add 

builder.Services.AddHttpClient();  //Inject httpClient


2. Inject Httpclient on the controller

public class RegionController : Controller
{
    private readonly IHttpClientFactory httpClientFactory;

    public RegionController(IHttpClientFactory httpClientFactory)
    {
        this.httpClientFactory = httpClientFactory;
    }
}

3. Get All Data

public async Task<IActionResult> Index()
{
	List<RegionDto> response = new List<RegionDto>();

	try
	{
		var client = httpClientFactory.CreateClient();

		var responseMessage = await client.GetAsync("https://localhost:7041/api/region");

		responseMessage.EnsureSuccessStatusCode();

		response.AddRange(await responseMessage.Content.ReadFromJsonAsync<IEnumerable<RegionDto>>());
	}
	catch (Exception)
	{    throw;  }

	return View(response);
}

---- Above Data is returned to the Index view_  Views/Region/Index.cshtml

@model IEnumerable<NZwalks.UI.Models.DTO.RegionDto>

@{
}

<h1 class="mt-3">Regions</h1>

<div class="d-flex justify-content-end">
    <a class="btn btn-secondary" asp-controller="Region" asp-action="Add">Add Region</a>
</div>

<table class="table table-bordered">
    <thead>
        <tr>
            <th>Id</th>
            <th>Code</th>
            <th>Name</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach(var region in Model)
        {
            <tr>
                <td>@region.Id</td>
                <td>@region.Code</td>
                <td>@region.Name</td>
                <td>
                    <a class="btn btn-light" asp-controller="Region" asp-action="Edit" asp-route-id="@region.Id">Edit</a>
                </td>
            </tr>
        }
    </tbody>
</table>

4.POST data Create Region

- add button on Index View

<div class="d-flex justify-content-end">
    <a class="btn btn-secondary" asp-controller="Region" asp-action="Add">Add Region</a>
</div>

- Create Add View

@model NZwalks.UI.Models.DTO.AddRegionModel
@{
}

<h1 class="mt-3">Add  Region</h1>

<form method="post">
    <div class="mt-3">
        <label class="form-label">Code</label>
        <input type="text" class="form-control" asp-for="Code"/>
    </div>

    <div class="mt-3">
        <label class="form-label">Name</label>
        <input type="text" class="form-control" asp-for="Name" />
    </div>

    <div class="mt-3">
        <label class="form-label">Image url</label>
        <input type="text" class="form-control" asp-for="RegionImageUrl" />
    </div>

    <div class="mt-3">
        <button type="submit" class="btn btn-primary">Save</button>
    </div>
</form>

---- Controller actions to create a new region
 
[HttpGet]
public IActionResult Add()
{
	return View();  
}

[HttpPost]
public async Task<IActionResult> Add(AddRegionModel request)
{
	var client = httpClientFactory.CreateClient();

	var httpRequestMessage = new HttpRequestMessage()
	{
		Method = HttpMethod.Post,
		RequestUri = new Uri("https://localhost:7041/api/region"),
		Content = new StringContent(JsonSerializer.Serialize(request), Encoding.UTF8, "application/json")
	};

	var httpResponseMessage = await client.SendAsync(httpRequestMessage);

	httpResponseMessage.EnsureSuccessStatusCode();

	var response = await httpResponseMessage.Content.ReadFromJsonAsync<RegionDto>();

	if (response is not null)
	{
		return RedirectToAction("Index", "Region");
	}

	return View();
}

5. PUT update region

<a class="btn btn-light" asp-controller="Region" asp-action="Edit" asp-route-id="@region.Id">Edit</a>

---View
@model NZwalks.UI.Models.DTO.EditRegionModel
@{
}

<h1 class="mt-3">Edit  Region</h1>

@if (Model is not null)
{
    <form method="post">
        <div class="mt-3">
            <label class="form-label">Id</label>
            <input type="text" class="form-control" asp-for="Id" readonly />
        </div>

        <div class="mt-3">
            <label class="form-label">Code</label>
            <input type="text" class="form-control" asp-for="Code" />
        </div>

        <div class="mt-3">
            <label class="form-label">Name</label>
            <input type="text" class="form-control" asp-for="Name" />
        </div>

        <div class="mt-3">
            <label class="form-label">Image url</label>
            <input type="text" class="form-control" asp-for="RegionImageUrl" />
        </div>

        <div class="mt-3">
            <button type="submit" class="btn btn-primary">Save</button>
        </div>
    </form>
}

---Controller Actions 

[HttpGet]
public async Task<IActionResult> Edit(Guid id)
{
	try
	{
		var client = httpClientFactory.CreateClient();

		var responseMessage = await client.GetFromJsonAsync<EditRegionModel>($"https://localhost:7041/api/region/{id}");

		if (responseMessage is not null)
		{
			return View(responseMessage);
		}

		return View(null);
	}
	catch (Exception)
	{ throw; }
}

[HttpPost]
public async Task<IActionResult> Edit(EditRegionModel request)
{
	var client = httpClientFactory.CreateClient();

	var httpRequestMessage = new HttpRequestMessage()
	{
		Method = HttpMethod.Put,
		RequestUri = new Uri($"https://localhost:7041/api/region/{request.Id}"),
		Content = new StringContent(JsonSerializer.Serialize(request), Encoding.UTF8, "application/json")
	};

	var httpResponseMessage = await client.SendAsync(httpRequestMessage);

	httpResponseMessage.EnsureSuccessStatusCode();

	var response = await httpResponseMessage.Content.ReadFromJsonAsync<EditRegionModel>();

	if (response is not null)
	{
		return RedirectToAction("Index", "Region");
	}

	return View();
}

6. Delete method 

-Add button on edit view

<button type="submit" class="btn btn-danger" asp-controller="Region" asp-action="Delete">Delete</button>

--Controller action

[HttpPost]
public async Task<IActionResult> Delete(EditRegionModel request)
{
	try
	{
		var client = httpClientFactory.CreateClient();

		var httpResponseMessage = await client.DeleteAsync($"https://localhost:7041/api/region/{request.Id}");

		httpResponseMessage.EnsureSuccessStatusCode();

		return RedirectToAction("Index", "Region");
	}
	catch (Exception)
	{

		throw;
	}
}


******
