1. Controller should validate file

    [HttpPost]
    [Route("Upload")]
    public async Task<IActionResult> Upload([FromForm] ImageUploadRequestDto file)
    {
        ValidateFileUpload(file);

        var imageDomain = new Image
        {
            File = file.File,
            FileExtention = Path.GetExtension(file.File.FileName),
            FileName = file.FileName,
            FileDescriptione = file.FileDescriptione,
            FileSizeInBytes = file.File.Length
        };

        if(ModelState.IsValid)
        {
            await imageRepository.Upload(imageDomain);

            return Ok(imageDomain);
        }

        return BadRequest(ModelState);
    }

    private void ValidateFileUpload(ImageUploadRequestDto request)
    {
        var allowedExtensions = new string[] { ".jpg", ".jpeg", ".png", ".bmp" };

        if (!allowedExtensions.Contains(Path.GetExtension(request.File.FileName)))
        {
            ModelState.AddModelError("File", "Unsupported file extension");
        }

        if(request.File.Length > 10485760) // File larger thatn 10mb
        {
            ModelState.AddModelError("File", "Please upload a file smaller than 10mb");
        }
    }

2.Repository does the file upload 

    public class LocalImageRepository : IImageRepository
    {
        private readonly IWebHostEnvironment webHostEnvironment;
        private readonly IHttpContextAccessor httpContextAccessor;
        private readonly NZWalksDbContext nZWalksDbContext;

        public LocalImageRepository(IWebHostEnvironment webHostEnvironment, IHttpContextAccessor httpContextAccessor, NZWalksDbContext nZWalksDbContext)
        {
            this.webHostEnvironment = webHostEnvironment;
            this.httpContextAccessor = httpContextAccessor;
            this.nZWalksDbContext = nZWalksDbContext;
        }

        public async Task<Image> Upload(Image image)
        {
            //var localFilePath = Path.Combine(webHostEnvironment.ContentRootPath, "Image", image.FileName, image.FileExtention);  //breaks because it adds an extra space

            var localFilePath = Path.Combine(webHostEnvironment.ContentRootPath, "Images", $"{image.FileName}{image.FileExtention}");// name and extention go together


            using var stream = new FileStream(localFilePath, FileMode.Create);

            await image.File.CopyToAsync(stream);  //Upload image to local Images folder

            // add HttpContextAccessor on program.cs

            var urlFilePath = $"{httpContextAccessor.HttpContext.Request.Scheme}://{httpContextAccessor.HttpContext.Request.Host}" +
                $"{httpContextAccessor.HttpContext.Request.PathBase}/Images/{image.FileName}{image.FileExtention}";  ///Path to upload to table so we can access running application 

            image.FilePath = urlFilePath; // path saved to database so we can access from running application

            await nZWalksDbContext.Images.AddAsync(image);  // save image to database
            await nZWalksDbContext.SaveChangesAsync();


            //Inorder for clients to be able to retreive static files, we need to add configs to the program.cs......by default asp.net doesn't allow loading of static files

            // app.UseStaticFiles

            return image;
        }
    }

3.Program.Cs

//Add below after builder.Services.AddControllers();

builder.Services.AddHttpContextAccessor();

//add below after app.UseAuthentication(); and app.UseAuthorization();

app.UseStaticFiles(new StaticFileOptions //Allows for images to be retrieved from the browser
{
    FileProvider = new PhysicalFileProvider(Path.Combine(Directory.GetCurrentDirectory(), "Images")),
    RequestPath = "/Images"
});

